AWSTemplateFormatVersion: '2010-09-09'
Description: Voice Assistant Service with Application Load Balancer (AL2023)

Parameters:
  EnvironmentName:
    Type: String
    Default: prod
    Description: Environment name for the deployment

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Description: EC2 instance type

  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Amazon Linux 2023 AMI ID

Resources:
  # IAM Role for EC2
  VoiceAssistantRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: VoiceAssistantPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - polly:SynthesizeSpeech
                  - transcribe:StartStreamTranscription
                  - transcribe:StartStreamTranscriptionWebSocket
                Resource: '*'

  VoiceAssistantInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: VoiceAssistantRole

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: vpc-0b57beecfa85ee517
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: vpc-0b57beecfa85ee517
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5050
          ToPort: 5050
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-088fe0d82efed64f0
        - subnet-0c38122943719196d
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 5050
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: vpc-0b57beecfa85ee517
      Targets: 
        - Id: !Ref VoiceAssistantInstance
          Port: 5050

  # EC2 Instance
  VoiceAssistantInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: subnet-088fe0d82efed64f0
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref VoiceAssistantInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Starting user data script execution"

          # Update system and install base packages
          echo "Updating system packages"
          dnf update -y
          dnf install -y git curl

          # Install Node.js 18
          echo "Installing Node.js"
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          dnf install -y nodejs

          # Verify installations
          echo "Verifying installations"
          node --version
          npm --version
          git --version

          # Create app directory
          echo "Creating application directory"
          mkdir -p /opt/voice-assistant
          cd /opt/voice-assistant

          # Clone application
          echo "Cloning application repository"
          git clone https://github.com/moonis-dell/voice-assistant.git .

          # Setup environment
          echo "Setting up environment variables"
          cat > /opt/voice-assistant/.env << EOL
          NODE_ENV=production
          PORT=5050
          AWS_REGION=${AWS::Region}   
          
          # Server Configuration           
          LOG_LEVEL=info          

          # AWS Polly Configuration
          POLLY_VOICE_ID=Ruth

          # Speech-to-Text Configuration
          STT_PROVIDER=transcribe
          TTS_PROVIDER=polly

          # WebSocket Configuration
          WS_MAX_PAYLOAD=1048576
          WS_PING_INTERVAL=30000
          WS_PONG_TIMEOUT=10000
          WS_BACKLOG=511

          #twilio 
          TWILIO_ACCOUNT_SID=xxxxxxxxxxxxxxxx
          TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxx

          LOG_LEVEL=info
          NODE_ENV=development

          #Groq
          RESPONSE_GENERATOR=groq
          GROQ_ENABLED=true
          GROQ_API_KEY=xxxxxxxxxxxxxx
          GROQ_MODEL=mixtral-8x7b-32768
          GROQ_MAX_TOKENS=100
          GROQ_TEMPERATURE=0.7
          EOL

          # Set permissions
          chown -R ec2-user:ec2-user /opt/voice-assistant

          # Install dependencies
          echo "Installing Node.js dependencies"
          cd /opt/voice-assistant
          npm install

          # Setup systemd service
          echo "Setting up systemd service"
          cat > /etc/systemd/system/voice-assistant.service << EOL
          [Unit]
          Description=Voice Assistant Service
          After=network.target

          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/opt/voice-assistant
          Environment=NODE_ENV=production
          ExecStart=/usr/bin/node src/server.js
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOL

          # Start service
          echo "Starting voice assistant service"
          systemctl daemon-reload
          systemctl enable voice-assistant
          systemctl start voice-assistant

          echo "User data script completed"

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref VoiceAssistantInstance

  PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt VoiceAssistantInstance.PublicIp

  TargetGroupARN:
    Description: ARN of Target Group
    Value: !Ref ALBTargetGroup
